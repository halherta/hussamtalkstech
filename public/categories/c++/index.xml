<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>C&#43;&#43; on Hussam Talks Tech</title>
        <link>http://localhost:1313/categories/c&#43;&#43;/</link>
        <description>Recent content in C&#43;&#43; on Hussam Talks Tech</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Hussam Al-Hertani</copyright>
        <lastBuildDate>Sat, 17 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/c++/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>UDPNode: A C&#43;&#43; class for UDP Communication</title>
        <link>http://localhost:1313/p/udpnode-a-c-class-for-udp-communication/</link>
        <pubDate>Sat, 17 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/udpnode-a-c-class-for-udp-communication/</guid>
        <description>&lt;p&gt;A couple of months ago, I decided to pursue few IOT project ideas that could benefit from basic UDP (User Datagram Protocol) communication. The MQTT and CoAP protocols are definitely more robust and secure. But there are some situations where the basic UDP protocol is sufficient. The POSIX C socket API built into Linux is quite complete; if a bit raw. And understanding said socket API; even with good command of the C programming language, can a bit daunting. Thankfully  &lt;a class=&#34;link&#34; href=&#34;https://beej.us/guide/bgnet/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Beej&amp;rsquo;s Guide to Network Programming&lt;/a&gt; does a great job of covering all aspects of socket programming. So I decided to embark on a journey of learning Linux Network / socket programming. My goal was to wrap just enough socket programming functionality within a C++ class to facilitate basic UDP communication. The result was the &lt;a class=&#34;link&#34; href=&#34;https://www.github.com/halherta/udpnode&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UDPNode class&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-udpnode-class&#34;&gt;The UDPNode class
&lt;/h3&gt;&lt;p&gt;The UDPNode class facilitates UDP transmission. When a UDPNode object is instantiated, it&amp;rsquo;s bound to an IP address and port on which it listens. A receive event loop is initialized as a thread. The purpose of the receive event loop is to capture datagrams sent from other UDPNodes and place them in a receive queue. The received datagrams can be extracted from the receive queue at a later time for processing. The same object can also transmit a datagram to other IP address and port combinations. All received datagrams must adhere to a specific structure that is serialized / deserialized in a JSON format.&lt;/p&gt;
&lt;p&gt;This datagram structure is shown below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rxDatagram&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; srcport;   &lt;span style=&#34;color:#75715e&#34;&gt;// Source port number.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string srcipaddr;  &lt;span style=&#34;color:#75715e&#34;&gt;// Source IP address.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    time_t time_stamp;      &lt;span style=&#34;color:#75715e&#34;&gt;// Timestamp of the received datagram.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;string msg;        &lt;span style=&#34;color:#75715e&#34;&gt;// Message content.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; crc_checksum;  &lt;span style=&#34;color:#75715e&#34;&gt;// CRC checksum of the message.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; jointhread;        &lt;span style=&#34;color:#75715e&#34;&gt;// Flag to indicate if the thread should join.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;msg&lt;/code&gt; string is the actual UDP message that&amp;rsquo;s being pushed around. Each UDPNode can receive and transmit these datagrams. Here&amp;rsquo;s an example of an application that primarily listens for datagrams:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;UDPNode.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UDPNode node(&lt;span style=&#34;color:#ae81ff&#34;&gt;3490&lt;/span&gt;, ipv6,&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,true);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node.startRxLoop();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    usleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;10000000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(node.rxDataAvailable()){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; datagramsavailable &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; node.rxDataQueueSize();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;( &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; datagramsavailable ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            node.printDatagram(node.readRxDatagramFromQueue());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            usleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;100000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node.endRxLoop();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above program instantiates a UDP node object on port 3490, using IPv6. It sets the maximum message length to 1024 bytes, the maximum message queue size to 5 and enables debug messages. The program starts the receive thread and waits 10 seconds. It then prints the contents of all datagrams available in the receive queue. Finally, it stops the receives thread before exiting the program.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s another program that transmits datagrams:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;UDPNode.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UDPNode node(&lt;span style=&#34;color:#ae81ff&#34;&gt;5590&lt;/span&gt;, ipv6, &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,true);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node.tx(&lt;span style=&#34;color:#ae81ff&#34;&gt;3490&lt;/span&gt;, ipv6,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;::1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Attitude is the &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;little thing&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; that makes a big difference&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node.tx(&lt;span style=&#34;color:#ae81ff&#34;&gt;3490&lt;/span&gt;, ipv6,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;::1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Life is too short to spend another day at war with yourself&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node.tx(&lt;span style=&#34;color:#ae81ff&#34;&gt;3490&lt;/span&gt;, ipv6,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;::1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The best time to plant a tree was 20 years ago. The second best time is now&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node.tx(&lt;span style=&#34;color:#ae81ff&#34;&gt;3490&lt;/span&gt;, ipv6,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;::1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Be happy for this moment. This moment is your life&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node.tx(&lt;span style=&#34;color:#ae81ff&#34;&gt;3490&lt;/span&gt;, ipv6,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;::1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A good laugh and a long sleep are the two best cures for anythin&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node.tx(&lt;span style=&#34;color:#ae81ff&#34;&gt;3490&lt;/span&gt;, ipv6,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;::1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The sun is a daily reminder that we too can rise again from the darkness, that we too can shine our own light&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node.tx(&lt;span style=&#34;color:#ae81ff&#34;&gt;3490&lt;/span&gt;, ipv6,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;::1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Today is a good day to try&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    node.tx(&lt;span style=&#34;color:#ae81ff&#34;&gt;3490&lt;/span&gt;, ipv6,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;::1&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The only person you are destined to become is the person you decide to be&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This program instantiates a UDP node object that listens on port 5590, using IPv6. It sets the maximum message length to 1024 bytes, the maximum message queue size to 5 and enables debug messages. It then sends 8 messages to the listening UDP node on port 3490. If you compile both programs above and run them, you&amp;rsquo;ll witness how they interact with each other. Be sure to check out the &lt;a class=&#34;link&#34; href=&#34;https://www.github.com/halherta/udpnode&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github repository&lt;/a&gt; for compilation instructions.&lt;/p&gt;
&lt;p&gt;This class has not been rigourously tested, so feel free to submit pull requests for adding functionality or fixing bugs!&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
