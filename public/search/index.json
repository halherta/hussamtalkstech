[{"content":"In this blog entry, the PCB layout for the astable multivibrator circuit schematic design covered in part I, will be created using the Kicad PCB Editor application. Before proceeding however the user must be made aware of the two most common measurement units and how to convert between them.\nFigure 1: KiCad PCB Editor. Grid settings and coordinates\nImportance of spatial dimensions and Units of measurements for PCB design Schematic capture is an abstract procedure and there’s no real need to keep in mind the dimensions of component symbols, wires nor the spacing between them. A schematic simply needs to be clean, readable and presentable.\nOn the otherhand, when laying out a PCB layout, the designer must be aware of the dimensions of the footprints, traces e.t.c for many reasons. For starters, a PCB layout has finite space defined by the PCB’s outline (board edge). This space must be sufficient to carry all the layout footprints and traces. The traces, which act like wires; need to be sized adequately to allow enough current to flow through them. For example, a trace with a width of 12mils can handle about 1A of current (assuming 1 \\(\\frac{oz}{ft^2}\\) copper depth/height). If a trace needs to handle more current, then its trace width will have to be increased.\nFinally PCB manufacturing houses have things called design rules that they make available to their customers. These design rules usually include the minimum acceptable clearances required in a layout design. These tolerances exist because the equipment that fabricates PCB’s is only able to manufacture PCBs within certain prescribed dimensional tolerances. For example, a PCB manufacturing house can state as part of their design rules that the smallest distance/clearance between two copper traces must be 6mil. If the designer places two traces with a 4mil spacing between them, the PCB manufacturer will not be able to fabricate the board.\nThe two units of measurements used to measure the dimensions of footprints, traces, clearances e.t.c are millimetres (mm) and mils. 1 mil is equivalent to a thousandths of an inch and is sometimes referred to as 1 thou. In the past, the imperial unit mils used to be more popular in the PCB design and electronics world. This is why through-hole dual inline packages (DIP), a technology developed in the 70\u0026rsquo;s, has a pitch (spacing between the pins) of 100 mils or 0.1”. This is also the spacing used between tie-points on a breadboard. And while the metric mm has become more dominant, the imperial mil is still in use. As such, it is important to be able to convert between mils and mm.\nTo convert from mil to mm:\n$$ Val_{mm} = \\frac{Val_{mil} \\times 25.4}{1000} $$ To convert from mm to mil:\n$$ Val_{mil} = \\frac{Val_{mm} \\times 1000}{25.4} $$ When placing moving components/traces, one must also be aware of the spacing being used by the KiCad PCB editor. In the grid size can be changed via the dropdown menu shown in Figure 1. The grid units can also be changed via the icons in the left toolbar. In the grid size dropdown menu, you\u0026rsquo;ll notice that the first 12 entries are in mils (whole numbers) whereas the last 10 entries measurements are in mm (whole numbers).\nThe designer will want to alternate between finer and coarser grid settings during the layout process. When placing large components or drawing the PCB outline, use coarse grid setting like 10-50mil or 2.5-5mm. When placing smaller parts in the layout, the designer will want to switch to finer settings like 1-5 mils or 0.1-0.5mm. Custom grid sizes may also be set if needed.\nThe cursor coordinates can be determined by looking at the bottom status bar. The X/Y coordinates are defined with respect to the top left corner of the white outline defining the work area. The second set of coordinates; dx/dy, are defined with respect to a user-defined/false origin. This false origin can be set anywhere in the work area simply by moving the cursor there and pressing space bar. The false origin will come in very handy when sizing the PCB outline.\nImport Netlist. Figure 2: Update from PCB\nThe next step is to import the netlist (design) created in the schematic editor into the layout editor. This is accomplished by pressing F8 or the icon shown in Figure 2 in the top toolbar. The Update PCB from Schematic dialog pops up as shown in Figure 3. Press the Update PCB button to see all the parts and the rats nest connecting them\nFigure 3: Update from PCB Dialog\nMove the cursor to the top left corner of the layout editor\u0026rsquo;s work area and leave them there for now.\nFigure 4: Component footprints\nBoard Setup and Establishing the Design Rules Before proceeding with the layout, let\u0026rsquo;s have a look at the board setup. The Board Setup dialog can be accessed through the File Menu or green icon with red gear wheel in the top left corner (top toolbar).\nFigure 5: Board Setup - Board Editor Layers\nIn the Board Editor Layers sub dialog, we can see all the different layers that we can access in the design.\nFigure 6: Board Setup - Physical Stackup\nIn the Physical Stackup sub dialog we can select the number of layers in the board. Two is the default, and we will leave that as is. You would need to change this value if you want to build a 4-12 layer board.\nFigure 7: Board Setup - Constraints (Design Rules)\nIn the constraints sub dialogs we have KiCad\u0026rsquo;s default design rules. These can be modified to meet PCB manufacturing house requirements. The default rules are adequate for our purposes. So leave them as is for now.\nFigure 8: Board Setup - Pre-defined Sizes\nIn the Pre-defined Sizes sub dialog, pre-defined trace widths and via dimensions can be specified. Let\u0026rsquo;s add a pre-defined trace size of 12 mils (0.3048mm) and pre-defined Vias with a Size of 30 mil (0.762mm) and Hole 0f 15 mil (0.381mm). This will now show in the drop down menus beneath the top toolbar in the main KiCad layout editor window\nFigure 9: Board Setup - Net Classes\nFinally, in the Net Classes sub dialog, we can assign Nets (wires in our design) to Net classes with distinct trace widths. This will come in handy in future designs where we may want to have traces with different widths (to handle different currents; say signal and power net classes) in the same layout.\nClick OK to exit the dialog.\nCreate the PCB Outline Just like in the schematic editor, the layout editor also has many hotkeys that you ought to familiarize yourself with. The hotkeys list can be accessed via Ctrl-F1 or through the Help menu.\nFigure 10: Board Edge Creation\nTo create a PCB outline:\nSelect the Edge.cuts layer from the layer manager on the right hand side of the layout editor window. Set the Grid size to 5mm (coarsest metric settings) from the top drop-down menus Select the Draw a Rectangle icon on the right toolbar. Move the cursor to a location to start drawing the a square 50mmx80mm PCB outline. Press spacebar to set the false origin to this same location Left click the mouse to start drawing the PCB outline and move down 50mm, and right 80mm, left click again to finish. Alternatively you can use the keyboard arrows to move the cursor. Press enter once to stop. Press the Escape button to get back to select mode. This will give us a rectangular board edge with sharp corners. Ideally we\u0026rsquo;d like to convert these sharp corners to smoother, \u0026lsquo;more round\u0026rsquo; corners. To achieve this;\nSelect the board edge and right click. A the context menu will pop-up. Choose Shape Modification -\u0026gt; Fille Lines. A tiny Fillet Lines dialog will pop-up. Change the fillet radius to 5mm and press OK. The corners should now be round as shown in Figure 10. Placing Mounting holes and Components Mounting holes should be included in all PCB designs. They also ought to be integrated in the PCB layout as early as possible. Be sure to set the grid size to a finer setting; say 0.25mm.\nFor this particular board, place one mounting hole close to each corner on the PCB outline as shown in Figure 11. Try to make the placement as symmetric as possible (use the grids!!).\nFigure 11: Placing Mounting holes and Components\nTo place components on the board, simply move them over into the PCB outline area. Move all components excluding the battery holder into the PCB outline. You can use the context menu or the m hotkey. The battery holder can then be placed last since it will be mounted on to the bottom of the board. To achieve this, press the f hot key to flip it. Notice how the silkscreen switches colour from yellow (top silkscreen) to pink (bottom silkscreen)\nParts placement is one of the most important steps in layout design. Putting some thought into how each component is placed relative to other components will help reduce routing conflicts and make the trace routing step (next step) much easier.\nIf two components are connected directly to each other in the schematic, be sure to place them as closely as possible in the layout in a way that minimizes the criss-crossing of the ratsnest lines (white lines connecting footprints together…more on this in the next paragraph). One possible placement is shown in Figure 11.\nAdd Two Ground planes Printed circuit boards can have from 1 to more than 50 routing copper layers. I like to have a minimum of 2 layers for simpler designs like this one. Two layer boards allow the designer to route traces between components on the front copper layer (top side of the board) as well as the back copper layer (bottom side of the board). In fact, one can start a trace in one layer, use a via to switch over to the other layer and continue to draw the rest of the trace on this new layer!. But what do we do with all the board real estate on both layers that is not used by traces or vias?\nA ground plane is created by assigning all the unused copper fill (portions of copper fill not used for traces/pads/vias) on both top and bottom layers to the ground net. This has two advantages:\nIt reduces noise and improves signal integrity. Because the ground net is available almost everywhere on the board, ground trace routes may not be needed, reducing the complexity of the trace routing procedure. Figure 12: Assigning Ground Net to the top and bottom copper fills at once\nIn most 2 layer designs with traces, the goal is to route as many traces as possible on the top layer along with a top ground copper fill that covers the unused areas. Traces are routed on the bottom layer only when necessary, allowing as much as possible of the bottom layer to be utilized as a contiguous ground fill/net. Since our design is relatively simple, we should use only the front (top) layer for trace routing. And assign ground copper fills ( or planes) to both the back (bottom) layer, and the unused portions of the front layer.\nFigure 13: Copper Fills added successfully\nTo add a ground plane,\nSet the Grid size back to 5mm (coarsest metric settings) from the top drop-down menus Select the Add a filled zone icon from the right toolbar or use the hotkey Ctrl-Shift-Z. Place the cursor on the top left corner of the PCB outline and left click the mouse. You will be greated with a Copper Zone Properties dialog. Be sure to select both the front copper (F.Cu) and bottom copper (B.Cu) layers and the GND net as shown in figure 13. Then press OK. Move the cursor to all four corners (follow the same path as that of the PCB outline) on the board to successfully place the ground plane. Route Traces The blue lines connecting the footprints to each other, that can be seen in Figure 13 are called the ratsnest. They indicate where the copper traces need to go to connect the components as per the schematic (netlist). This process is called manual routing when done by the PCB layout designer. Routing can also be done automatically (autorouting) by a computer algorithm, but in many cases the designer will want to route traces manually. To route these traces manually click the Route tracks icon from the left toolbar or use the Shift+x hotkey.\nAlways be sure to exit or enter pads (end routes) at the N, S, E and W points. Avoid diagonal routes leaving from or entering to the pads. Also avoid 90 degree turns in your routes.\nFigure 14: Successfully routed traces\nSet the Grid size back to 0.25-0.1mm from the top drop-down menus Route all tracks (matching the ratsnest) in front copper (F.Cu) only. This process can be tricky. Try doing it yourself and refer to figure 14 if you need help. Notice that you will not need to route the ground traces as shown in Figure 14. select the battery holder footprint, flip it so that it\u0026rsquo;s mounted on the bottom layer by using the \u0026lsquo;f\u0026rsquo; hotkey. Then place it as shown in figure 14. Route the traces attached to it. Again you will not need to route the ground net for now. Click on Add a filled zone icon again. Move the cursor inside the layout and right click. Go to Zones-\u0026gt;Fill All Zones This will fill in the copper fill. The board should now look as shown in Figure 15. If you make any modification to your board i.e. move a trace or part e.t.c., you\u0026rsquo;ll have to repeat this step again. You can also turn OFF the zones by clicking on the Show only zone boundaries icon in the left toolbar. Figure 15: Copper fills filled\nNotice that the ground pins on the transistors and the battery holder are connected directly to the ground copper fills via spokes. These spokes are called \u0026rsquo;thermal reliefs\u0026rsquo;. It can be hard to get solder to reflow on pads that are directly connected to copper fills because the heat dissipates across the entire copper fill. Thermal reliefs allow us to have our cake and eat it too; i.e.provide a robust electrical connection from the pad to the copper fill, while preventing the heat needed for soldering from dissipating into the copper fill.\nDesign Rule Check In order to verify that the PCB layout has so far respected the design rules, run a design rule check (DRC). This can be accomplished via Inspect-\u0026gt;Design Rule Checker. This opens the DRC Control dialog. Then click on the Run DRC button shown in Figure @fig:18.\nAny problems listed under Violations that must be rectified. Also the Unconnected Items should be zero, if its more than zero, this indicates that you forgot to route some of the traces.\nIf the DRC passes without any problems and no unconnected nets then congratulations! The layout is valid and almost complete!.\nFigure 16: Design Rule Check - No Errors!\nAdd Text \u0026amp; Logo To add text to the Front silkscreen, select the Add a text item icon in the right toolbar Ctrl+Shift+T and left click in the layout area. In the resulting dialog write in the Text field the text to be displayed on the board. Be sure to select the front silkscreen layer (F.SilkS) to write text to the Front layer. The text’s size and position can also be adjusted from the very same dialog. Once you are happy with the text, simply press the OK bottom and move the text to the appropriate location on the board.\nFigure 17: Add Text to front / top silkscreen\nBe sure to add your name and the name of the design on to the board. Also add ON/OFF labels for the switch positions as shown in Figure 18.\nFigure 18: Text added\nAdding a logo is a little bit more complicated. Basically KiCAD will convert the logo into a footprint that can then be added to the footprint libraries. The complete process is listed below:\nFirst create three nested folders in your root folder KiCadProj called myLibraries/myFootprints/logos.pretty. The myLibraries folder will contain all custom schematic symbol and layout footprint libraries that you may decide to create in the future. The myFootprints folder will contain all future custom layout footprint collections The logos.pretty is the folder that will contain all custom layout footprints that are logos. Notice that layout footprint collections must be placed into a folder with a .pretty extension. From the KiCad main window select Image Converter. Figure 19: Smiley- use this logo\nChoose a reasonable logo image that is sized around 256x256 pixels. Logos will show up better on the PCB if they are less complicated. Avoid photos. For the sake of this exercise use the smiley logo shown in Figure 19. Once the Image Converter application opens, load the logo into the application through the Load Source Image button. Be sure to set Format: to Footprint(.kicad_mod file) and Board Layer for Outline to Front silk screen Set the Size to 20 by 13.3mm and the Black/white threshold to 70. Press the Export button and save the file as smiley.kicad_mod in the logos.pretty folder (Figure 21). Figure 20: Import logo and convert it to footprint\nThe goal is to always have the image features be dark on a white background. If that’s not the case, experiment with the negative checkbox and the Black/white threshold slider.\nFigure 21: location of smiley.kicad_mod\nIn the PCB Editor, go to Preferences-\u0026gt;Manage Footprint Libraries Select the Global Libraries tab Press the Add existing library to table button (folder icon) and enter a name for this library and its library path as shown in Figure 22. Figure 22: Add logos footprint library path to KiCAD\nIn the PCB ditor, select the Add Footprint icon (hotkey is a), then left click anywhere within the layout editor\u0026rsquo;s grid area. This will open a Choose Footprint Dialog. - In this dialog go to the logos library on the left-hand side and double click on the smiley footprint as illustrated in Figure 23.\nFigure 23:Footprint Library Browser\nNow place it in the PCB layout. You\u0026rsquo;ll notice a G** * reference value is visible. If you select the logo and press the \u0026lsquo;E\u0026rsquo; hotkey (or right click -\u0026gt; Properties), you can render the reference value invisible. The final layout with filled ground planes is shown in Figure 24.\nFigure 24: Final Layout\nKiCad\u0026rsquo;s PCB Editor also comes with a 3D viewer. To access it, go to View-\u0026gt;3D Viewer. Figure 25 illustrates what the board looks like in the 3D viewer.\nFigure 25: 3D view of Final Layout\nGenerate Gerber files In order to fabricate the completed layout, the layout’s Gerber files need to be generated. Gerber files contain information about the location and contents of each layer i.e. Front Copper, Front Silkscreen, Drill holes. e.t.c\nTo generate the Gerber files:\nCreate a directory called Gerber in your project directory Select File-\u0026gt;Plot from the top menu. In the plot dialog be sure to select the 7 layers shown in Figure 26. F.Cu (.gtl) -\u0026gt; Front/Top Copper B.Cu (.gbl) -\u0026gt; Bottom Copper F.Silkscreen (.gto) -\u0026gt; Front/Top Silkscreen B.Silkscreen (.gbo) -\u0026gt; Bottom Silkscreen F.Mask (.gts) -\u0026gt; Front/Top Soldermask B.Mask (.gbs) -\u0026gt; Bottom Soldermask Edge.cuts (.gm1) -\u0026gt; Board Edge Under Gerber options select Use Protel filename extensions as shown. Set the Output folder to Gerbers and press the Plot button. This will create all the necessary Gerber files except the drill file and place them in the Gerbers folder within the project folder. Figure 26: Plot Gerber files\nTo generate the drill(.drl) file:\nPress the Generate Drill files… button in the plot dialog. This will open a new dialog called Generate Drill Files. Figure 27: Generate Drill file\nIn this dialog, be sure to set the Drill Units to Millimeters. Under Drill File Format, select Excellon \u0026amp; PTH and NPTH holes in single file. Set Drill Units to Millimeters. Be sure to set the Output folder to the path of the Gerber folder created earlier Press the Generate Drill File button The Gerber folder now holds all necessary files for fabrication! You can now view the Gerber files and drill file in the Gerber viewer accessible from the main KiCad window. Figure 28: Gerber Viewer\nAnd that\u0026rsquo;s it! Compress the Gerbers folder into a zip file and upload it onto your favorite PCB manufacturer website. This has been a rather long entry. My goal is to make this tutorial available in a video format in the near future.\n","date":"2024-07-17T00:00:00Z","permalink":"http://localhost:1313/p/pcb-layout-design-with-kicad-part-ii-layout-creation/","title":"PCB Layout Design with KiCAD Part II: Layout Creation"},{"content":"In this blog entry, I will introduce the printed circuit board (PCB) design flow. I will then proceed to focus on the schematic capture section of the PCB design flow by using the KiCad PCB design tool to create a schematic for a simple LED blinker circuit. The PCB layout section of the design flow will be covered in a later blog entry.\nPCB Design Flow The PCB design flow is illustrated in Figure 1. It can be broken into two major steps:\nSchematic Creation: This is where the circuit schematic will be ‘captured’ by the PCB design tool. Layout Creation: This is where the circuit schematic will be turned into a PCB layout containing matching footprints for the various components in the circuit, and traces representing the wires/nets connecting these components. Figure 1: PCB Design Flow\nEach one of these steps can be broken down into further smaller steps.\nSchematic Creation Overview A circuit schematic is an illustrative diagram demonstrating how a variety of electrical/electronic components represented by schematic symbols, are wired / connected together.\nHere the designer inputs the schematic into KiCad’s schematic capture (editor) tool. If one or more components in the circuit is not available in the schematic symbols library, the designer must create a new schematic symbol and add it to the schematic. The procedure for schematic symbol creation is beyond the scope of this tutorial. It may be covered in a future blog entry\nOnce the schematic is completed and verified, a footprint assignment tool is then used to assign every schematic symbol in the schematic to a layout footprint. If one or more components (schematic symbols) in the design have no valid footprint(s) in the footprint library, the designer must create a suitable footprint, and map it to its appropriate schematic symbol. The procedure for layout footprint creation is yet again outside the scope of this tutorial and may be covered in a future blog entry.\nAt this point, the user can generate the bill of materials (BOM) list containing a list of all the components required by the schematic, and generate the schematic netlist. The schematic netlist is simply a file that textually describes all the components and the interconnections / wiring between them as illustrated in the schematic.\nLayout Creation Overview Here the designer will first open KiCad’s PCB / layout editor tool, and set the appropriate design rules for the layout. The design rules are determined by the PCB manufacturer and ensure that the KiCad layout design meets the specifications required for successful fabrication.\nThe designer will then import the schematic netlist into the layout editor tool and create the PCB’s outline via the ‘Edge.Cuts’ (board edge) layer. Copper fills / pours for ground planes and other zones are then allocated within the PCB outline.\nNext, all component footprints are placed within the PCB outline and the traces between the components are routed (as per the wires/nets in the schematic). Once the layout is complete, the designer will perform a design rule check (DRC) to ensure that the layout meets all the design rules and can indeed be fabricated by the PCB manufacturing house. The final step is to generate the layout\u0026rsquo;s Gerber files and send them to the PCB manufacturing house for fabrication.\nSchematic Symbol vs Layout Footprint Schematic symbols denote the schematic representation of a component. For example the schematic symbol of a resistor is shown in Figure 2. Note that because a schematic symbol is an abstract illustration representing a component, it\u0026rsquo;s exact size, placement and dimensions matters in so far as to ensure that the schematic is clear, uncluttered and legible. The size \u0026amp; position of the schematic symbol does not translate into the physical world.\nFigure 2: Resistor schematic symbol\nLayout footprints on the other hand are just that, the footprint representation that will be \u0026lsquo;printed on \u0026amp; drilled into\u0026rsquo; the printed circuit board. Layout footprints typically consists of a silkscreen portion outlining the size and shape of the component to be placed, and copper through hole / surface mount pads that connect the components pins to the traces on the PCB.\nThe dimensions of the layout footprint must match the dimensions of the component that it represents, since the component will be placed onto its layout footprint in the physical world. The placement of the footprint must also be well thought out. Figure 3 illustrates a matching layout footprint for the resistor schematic symbol in Figure 2.\nFigure 3: Resistor layout footprint\nIntroduction to KiCad Figure 4: Main KiCad window\nWhen the KiCad application runs, the first thing the user sees is the main KiCad window, From this window, a variety of tools can be accessed including:\nSchematic editor - used for schematic capture Symbol (Schematic) editor - used to edit existing schematic symbols and create new ones PCB layout editor - used for PCB layout design Footprint editor - used to edit existing layout footprints and create new ones Gerber viewer - used to inspect Gerber files Image Converter - used for creating logos from bitmap images among other things Calculator tools - used for various calculations i.e. calculate current capacity of a trace Drawing sheet editor - edit drawing sheet borders and title blocks for use in schematics and PCB designs Plugin and content Manager - Manage downloadable packages from KiCad and 3rd party repositories. Creating a New Project Figure 5: Create a new project\nCreate a new root directory where all KiCad projects will be saved. Call this directory KiCadProj or some other relevant name,\nIn KiCad goto File-\u0026gt;New Project\nCreate a new project called led_blinky and save it in the KiCadProj directory. This will automatically create a folder name led_blinky under the KiCadProj directory and create a .kicad_pro project file in it. All other files related to this project i.e. schematic, layout, netlist e.t.c. will be saved into this folder.\nFigure 6: Project Created\nThe Astable Multivibrator Circuit The transistor based astable multivibrator circuit shown in the schematic below is a simple square wave oscillator. It generates two square waves that exhibit a 180 degree phase shift. For more on the theory behind this circuit’s operation, the curious reader can go here.\nFigure 7: Astable Multivibrator Circuit\nConnecting LED’s to the collector of each transistor turns the circuit into an LED flasher. The frequency of oscillation is a function of the values of R2, R3, C1 \u0026amp; C2 and is approximately equal to :\n$$f = \\frac{1}{ln(2) \\times (R_2C_1 + R_3C_2)}$$ Assuming that \\(R_2 = R_3 = R \\) and \\(C_1 = C_2 = C \\), the frequency of oscillation becomes,\n$$f = \\frac{1}{ln(2) \\times RC }$$ Schematic Capture Let\u0026rsquo;s start with the schematic editor from the KiCad main window. Before going any further, it is important to familiarize yourself with the hotkeys available within KiCad. It might not seem necessary, but it is well worth your time to memorize the hotkeys for some of the more commonly used actions. To get the list, go to Help-\u0026gt;List Hotkeys or press Ctrl-F1 and look under the Schematic Editor listview. Things that can be done easily with hotkeys in the schematic editor are listed below:\nFigure 8: KiCad Schematic Editor Hotkeys\ne - Edit properties of a component m - Move a component ctrl+D - Duplicate (Copy) a component r - Rotate a component x - Mirror a component along the X axis y - Mirror a component along the Y axis a - Add a component t - Add Schematic text Delete - Delete a component Using these shortcuts/hotkeys will make working with KiCad much faster and efficient.\nFigure 9: Edit Page Settings\nTo fill in the legend in the bottom left hand corner, go to File-\u0026gt;Page Settings , and fill in the various details i.e. revision number, date, title e.t.c. The page size and orientation can also be changed from the Page Settings dialog.\nFigure 10: Updated Legend\nOnce you are done with the page settings,the legend will be updated as shown in Figure 10.\nTo quickly zoom in and out of the schematic area one can use the mouses scroll wheel. Alternatively, you can also use the zoom icons in the center of the top toolbar.\nNow we add the components to the schematic! To add components, use the shortcut ‘a’ or click on the op-amp icon (triangular three pin component with a ‘+’ and ‘-’ signs on its inputs) in the top righthand corner. The following schematic symbols will be needed:\nTwo NPN transistors.2N3904 should be fine. Four Resistors. Select Component R_Small_US. R, R_US and R_Small can also be used. Two Capacitors. Select Component C_Polarized_Small_US. Any capacitor symbol with polarity will work, since this circuit utilizes polarized electrolytic capacitors. Two Light emitting diodes (LED)s. Select component LED. LED_Small can also be used. A power symbol. Select Component Battery. A ground symbol. Select Component GND. Four mounting holes. Select Component MountingHole. An SPDT (single pole double throw) switch SW_SPDT. Once these components are added to the schematic, use hotkeys to copy (c), move(m), delete(Delete), edit part values(e), rotate (r) and/or mirror(x/y) these components as needed. You can also right click on the component and a context menu will pop up giving you similar functionality. The hotkeys will make things go faster however.\nOnce all the parts are placed, connect them with wires. To start a wire you can use the hotkey (w) or click on the diagonal blue wire icon (Add a Wire) on the right toolbar. By default all wires are straight. To draw the diagonal wires, you’ll have to click on the Switch H \u0026amp; V only mode for new wires and buses icon. It is located on the left toolbar and has a small picture of two lines cutting each other at a 90 degree angle. Alternatively, you can use the Shift+Space shortcut.\nAdditionally, make sure you add a no connect flag to pin 3 of the SPDT switch (as shown in the figure below). This can be accomplished with the hotkey Q or by selecting the \u0026lsquo;x\u0026rsquo; icon in the right toolbar.\nOnce completed, the schematic should look similar the one in Figure 11. Make sure that all components are assigned the correct values.\nFigure 11: Completed schematic\nComponent Annotation and the Electrical Rule Check (ERC) Notice that each symbol come with two textual descriptions;\na reference such as R1, R2, C1, Q1, D2, SW1, BT1 e.t.c, and a name such as SW-SPDT or LED. Notice that for passive components, the name field ends up being set to their component values i.e. 330, 10u e.t.c. Both fields can be modified by selecting the symbol in question and then either right click-\u0026gt;Properties or pressing the \u0026lsquo;E\u0026rsquo; hotkey. It is important that each symbol in the schematic has a valid and unique reference value. This is because each symbol is represented in the netlist via its reference value. For example you cannot have two resistors with the same reference number R1.\nThe process of giving each component a unique reference value is known as Component Annotation. The KiCad schematic editor performs annotation for us automatically so you should not have to worry about it. Note that the reference value for each symbol consists of:\na reference designator (R for resistors, C for capacitors e.t.c.), and a unique number. Different symbols get different reference designators. A list of reference designators is provided below:\nResistor - R Capacitor - C Inductor - L Diode - D Transistor - Q Integrated circuit (I.C.) - U Connector - J Switch - SW Battery - BT Mounting Hole - H Add the PWR_FLAG symbol to both the VCC (power) and GND components/symbols. The reason for this will be explained shortly. The schematic should now look similar to that shown in Figure 12.\nFigure 12: Completed Schematic with PWR_FLAG\nThe KiCad schematic editor has a built-in Electrical Rule Check (ERC). The ERC ensures that the schematic is electrically sound and that power nets (wires) are connected to an appropriate single power driver. It also highlights floating pins e.t.c.\nIn order to run \u0026amp; pass the ERC, the current circuit needs to have a single power driver net. In our schematic that would be the VCC net. To facilitate this, attach a PWR_FLAG symbol to both the VCC (power source) and GND (power sink) symbols. Since this was already done, proceed to running the ERC check by clicking on the Perform Electrical Rules Check (checklist) icon in the top toolbar as shown in the figure below. If everything is OK, the ERC should pass successfully with no violations.\nFigure 13: ERC Passed!\nAssign Footprints to Schematic Symbols So far the schematic has been captured and an ERC was successfully passed. The next step is to assign a layout footprint to each schematic symbol. This is necessary to prepare our design for layout. Click on the Assign Footprints icon (containing a schematic symbol of an operation amplifier and an integraed circuit footprint linked) on the top toolbar. This should open the Assign footprints dialog shown in Figure 14.\nFigure 14: Assign footprints dialog with All Symbols assigned\nIn the Assign Footprints dialog the designer needs to assign the layout footprints in the rightmost column to the schematic symbols (with reference values) in centre column. Notice that the leftmost column has a list of the KiCad\u0026rsquo;s builtin layout footprint libraries.\nThe goal here is to match our schematic symbols (centre column) with appropriate layout footprints in the rightmost column. To help us achieve this goal, several filter icons are available that facilitate filtering through all the available footprints by keyword, pin count, library or search pattern.\nFor example, assume that the design needs a AAA battery connector with two pins (power and ground), to do this one can:\nturn on the filter footprint by library and select the ‘Battery’ library from the leftmost column,\nturn on the filter footprint by pin count, which will automatically look for all footprints with a pin count of two (same as that of the BT1 schematic symbol)\nturn on the filter footprint by search keyword or pattern and type in the adjacent text box AAA, which helps homing in on all footprints with ‘AAA’ in their names.\nFigure 15: Assigned battery holder footprint\nThis should leave us with three options. Select the Battery:BatteryHolder_Keystone_2479_3xAAA footprint by clicking on it. Notice how its assigned to the BT1 schematic symbol in the centre column in Figure 14.\nThe actual footprint can be inspected by clicking on the View the selected footprint in the footprint viewer icon (IC with magnifying glass). Many of the footprints built into KiCad have part-names and/or additional dimensions information embedded in their KiCad footprint names, making it easier to search for those parts on Electronic part distributor websites like Digikey or Mouser.\nIn a similar manner, associate the remaining schematic symbols to the following footprints:\nBT1 - Battery:BatteryHolder_Keystone_2479_3xAAA C1,C2 - Capacitor_THT:CP_Radial_D6.3mm_P2.50mm D1,D2 - LED_THT:LED_D5.0mm H1-H4 - MountingHole:MountingHole_3.2mm_M3 Q1,Q2 - 2N3904:Package_TO_SOT_THT:TO-92_Inline R1-R4 - Resistor_THT:R_Axial_DIN0207_L6.3mm_D2.5mm_P10.16mm_Horizontal SW1 - Button_Switch_THT:SW_E-Switch_EG1224_SPDT_Angled Now click on the Apply, Save Schematic \u0026amp; Continue button, then the OK button.\nCongratulations! You have completed the schematic capture process and are now ready to layout the board. This will be covered in a future blog entry.\n","date":"2024-07-10T00:00:00Z","permalink":"http://localhost:1313/p/pcb-layout-design-with-kicad-part-i-introduction-schematic-capture/","title":"PCB Layout Design with KiCad Part I: Introduction \u0026 Schematic Capture"},{"content":"In a previous blog entry, I successfully flashed a pre-built micropython image on the ESP32S3 Devkit-C-v1.1 board. Unfortunately the official prebuilt ESP32-S3 images on the Micropython wesbite site, support up to 8MB of Flash only. The ESP32S3 Devkit-C-v1.1 board (ESP32-S3-DevKitC-1-N16R8V) that I have has 16MB of Flash available; half of which was not detected. In order to get Micropython to utilize the entirety of the available 16MB of Flash memory, I had to build a custom Micropython image (from source).\nThe task of building a custom Micropython image can be divided into the following steps:\nDownload and Install the ESP-IDF environment and all the necessary prerequisites Download the Micropython source tree and install all the necessary prerequsites Add a new board variant (with 16MB flash + octal SPIRAM) to the ESP32_GENERIC_S3 board definitions folder in the Micropython source tree Build a custom Micropython image based on this new variant and flash it onto the board. Download and Install the ESP-IDF environment and all prerequisites The instructions for installing the ESP-IDF on a Linux based OS are provided here by Espressif. I will still go through all the steps below. Please bear in mind that the ESP-IDF SDK alone needs 1.8GB. The dev tools that it downloads (in a .espressif folder in the home directory) can easily eat up another 4.2GB!! Make sure you have enough hard drive space.\nStart by installing all prerequisites. For Debian this looks like:\n: $ sudo apt-get install git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0 Then download and install the ESP-IDF; the Espressif\u0026rsquo;s C SDK for the ESP32 family.\n: $ mkdir -p ~/Development/esp : $ cd ~/Development/esp : $ git clone -b v5.0.4 --recursive https://github.com/espressif/esp-idf.git : $ cd ~/esp/esp-idf : $ ./install.sh esp32s3 The last command (above) installs the tools (compiler, debugger e.t.c.) necessary for the esp32s3 only. If you\u0026rsquo;d like to install tools for both the ESP32 and the ESP32-C3 in addition to the ESP32-S3, replace that command with : ~$ ./install.sh esp32s3,esp32,esp32c3.\nAlso make sure that you download a version of the ESP-IDF that\u0026rsquo;s compatible with Micropython. In this tutorial version 5.0.4 of the ESP-IDF is used.\nOnce the ESP-IDF SDK is downloaded and installed, you\u0026rsquo;ll need to load the necessary environment variables to use it:\n: $ . ~/Development/esp/esp-idf/export.sh Download the Micropython source tree and install all prerequsites First, download all the necessary prerequisites for a Debian machine:\n: $ sudo apt-get install build-essential libreadline-dev libffi-dev git pkg-config gcc-arm-none-eabi libnewlib-arm-none-eabi Next, download the micropython source code into the ~/Development directory.\n: $ cd ~/Development : $ git clone --recurse-submodules https://github.com/micropython/micropython.git Build the MicroPython cross-compiler mpy-cross. It\u0026rsquo;s needed to pre-compile some of the built-in scripts to bytecode.\n: $ cd ~/Development/micropython/ : $ make -C mpy-cross Add a new board variant (with 16MB flash + octal SPIRAM) for the ESP32-S3 In the Micropython source tree, go to where the ESP32 boards are, and cd into the ESP32_GENERIC_S3 board definition folder.\n: $ cd ~/Development/micropython/ports/esp32/boards/ESP32_GENERIC_S3 : $ ls -al You\u0026rsquo;ll find the following files:\nboard.json board.md mpconfigboard.cmake mpconfigboard.h sdkconfig.board sdkconfig.flash_4m Let\u0026rsquo;s take a look at board.json:\n{ \u0026#34;deploy\u0026#34;: [ \u0026#34;../deploy_s3.md\u0026#34; ], \u0026#34;docs\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;features\u0026#34;: [ \u0026#34;BLE\u0026#34;, \u0026#34;External Flash\u0026#34;, \u0026#34;External RAM\u0026#34;, \u0026#34;WiFi\u0026#34; ], \u0026#34;images\u0026#34;: [ \u0026#34;generic_s3.jpg\u0026#34; ], \u0026#34;mcu\u0026#34;: \u0026#34;esp32s3\u0026#34;, \u0026#34;product\u0026#34;: \u0026#34;ESP32-S3\u0026#34;, \u0026#34;thumbnail\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://www.espressif.com/en/products/modules\u0026#34;, \u0026#34;vendor\u0026#34;: \u0026#34;Espressif\u0026#34;, \u0026#34;variants\u0026#34;: { \u0026#34;SPIRAM_OCT\u0026#34;: \u0026#34;Support for Octal-SPIRAM\u0026#34;, \u0026#34;FLASH_4M\u0026#34;: \u0026#34;4MiB flash\u0026#34; } } In the variants structure at the bottom, add a new variant FLASH_16M_SPIRAM_OCT. The modified board.json should now look like:\n{ \u0026#34;deploy\u0026#34;: [ \u0026#34;../deploy_s3.md\u0026#34; ], \u0026#34;docs\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;features\u0026#34;: [ \u0026#34;BLE\u0026#34;, \u0026#34;External Flash\u0026#34;, \u0026#34;External RAM\u0026#34;, \u0026#34;WiFi\u0026#34; ], \u0026#34;images\u0026#34;: [ \u0026#34;generic_s3.jpg\u0026#34; ], \u0026#34;mcu\u0026#34;: \u0026#34;esp32s3\u0026#34;, \u0026#34;product\u0026#34;: \u0026#34;ESP32-S3\u0026#34;, \u0026#34;thumbnail\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;https://www.espressif.com/en/products/modules\u0026#34;, \u0026#34;vendor\u0026#34;: \u0026#34;Espressif\u0026#34;, \u0026#34;variants\u0026#34;: { \u0026#34;SPIRAM_OCT\u0026#34;: \u0026#34;Support for Octal-SPIRAM\u0026#34;, \u0026#34;FLASH_4M\u0026#34;: \u0026#34;4MiB flash\u0026#34;, \u0026#34;FLASH_16M_SPIRAM_OCT\u0026#34;: \u0026#34;16MiB flash with Octal-SPIRAM\u0026#34; } } The next file that needs to be modified is the mpconfigboard.cmake. This is what it looks like before modification:\nset(IDF_TARGET esp32s3) set(SDKCONFIG_DEFAULTS boards/sdkconfig.base ${SDKCONFIG_IDF_VERSION_SPECIFIC} boards/sdkconfig.usb boards/sdkconfig.ble boards/sdkconfig.spiram_sx boards/ESP32_GENERIC_S3/sdkconfig.board ) if(MICROPY_BOARD_VARIANT STREQUAL \u0026#34;SPIRAM_OCT\u0026#34;) set(SDKCONFIG_DEFAULTS ${SDKCONFIG_DEFAULTS} boards/sdkconfig.240mhz boards/sdkconfig.spiram_oct ) list(APPEND MICROPY_DEF_BOARD MICROPY_HW_BOARD_NAME=\u0026#34;Generic ESP32S3 module with Octal-SPIRAM\u0026#34; ) endif() if(MICROPY_BOARD_VARIANT STREQUAL \u0026#34;FLASH_4M\u0026#34;) set(SDKCONFIG_DEFAULTS ${SDKCONFIG_DEFAULTS} boards/ESP32_GENERIC_S3/sdkconfig.flash_4m ) endif() Add a new if block at the bottom of the file for our new variant. The modified mpconfigboard.cmake should look like:\nset(IDF_TARGET esp32s3) set(SDKCONFIG_DEFAULTS boards/sdkconfig.base ${SDKCONFIG_IDF_VERSION_SPECIFIC} boards/sdkconfig.usb boards/sdkconfig.ble boards/sdkconfig.spiram_sx boards/ESP32_GENERIC_S3/sdkconfig.board ) if(MICROPY_BOARD_VARIANT STREQUAL \u0026#34;SPIRAM_OCT\u0026#34;) set(SDKCONFIG_DEFAULTS ${SDKCONFIG_DEFAULTS} boards/sdkconfig.240mhz boards/sdkconfig.spiram_oct ) list(APPEND MICROPY_DEF_BOARD MICROPY_HW_BOARD_NAME=\u0026#34;Generic ESP32S3 module with Octal-SPIRAM\u0026#34; ) endif() if(MICROPY_BOARD_VARIANT STREQUAL \u0026#34;FLASH_4M\u0026#34;) set(SDKCONFIG_DEFAULTS ${SDKCONFIG_DEFAULTS} boards/ESP32_GENERIC_S3/sdkconfig.flash_4m ) endif() if(MICROPY_BOARD_VARIANT STREQUAL \u0026#34;FLASH_16M_SPIRAM_OCT\u0026#34;) set(SDKCONFIG_DEFAULTS ${SDKCONFIG_DEFAULTS} boards/sdkconfig.240mhz boards/sdkconfig.spiram_oct boards/ESP32_GENERIC_S3/sdkconfig.flash_16m ) list(APPEND MICROPY_DEF_BOARD MICROPY_HW_BOARD_NAME=\u0026#34;ESP32S3 microcontroller with 16MB of Flash \u0026amp; Octal-SPIRAM\u0026#34; ) endif() Note that the list section in the last if block, defines the name of the board. Ideally you can place whatever you like here. It will override the board name definition in the mpconfigboard.h file and will be printed in the Micropython shell when the board is brought out of reset.\nNow let\u0026rsquo;s take a quick peek at sdkconfig.flash_4m:\nCONFIG_ESPTOOLPY_FLASHSIZE_4MB=y CONFIG_ESPTOOLPY_FLASHSIZE_8MB= CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\u0026#34;partitions-4MiB.csv\u0026#34; DO NOT MODIFY this file. Instead create a new file called sdkconfig.flash_16m. This file was already referenced in the modification made to the mpconfigboard.cmake. The contents of the new sdkconfig.flash_16m should be:\nCONFIG_ESPTOOLPY_FLASHSIZE_4MB= CONFIG_ESPTOOLPY_FLASHSIZE_8MB= CONFIG_ESPTOOLPY_FLASHSIZE_16MB=y CONFIG_PARTITION_TABLE_CUSTOM_FILENAME=\u0026#34;partitions-16MiB.csv\u0026#34; Note that the contents of the sdkconfig.flash_16m file are remarkably similar to those of the sdkconfig.flash_4m. The differences include setting the esptool FLASHSIZE variable to 16MB, and including the 16MiB partition memory file instead of the 4MiB one. The partition files theselves are already included in the Micropython source tree at micropython/ports/esp32/.\nWith these modifications completed, we are now ready to build the image!\nBuild a custom Micropython image based on this new variant To build the new micropython image; first load the esp-idf\u0026rsquo;s environment variables then cd into micropython/ports/esp32 and type the make submodules \u0026amp; make commands as shown below.\n: $ . ~/Development/esp/esp-idf/export.sh : $ cd ~/Development/micropython/ports/esp32 : $ make submodules : $ make BOARD=ESP32_GENERIC_S3 BOARD_VARIANT=FLASH_16M_SPIRAM_OCT The new custom micropython image files should be available at ~/Development/micropython/ports/esp32/build-ESP32_GENERIC_S3-FLASH_16M_SPIRAM_OCT/.\nto flash our Micropython image onto our ESP32-S3 Devkit microcontroller:\n: $ esptool.py --chip esp32s3 --port /dev/ttyUSB0 erase_flash : $ esptool.py -p /dev/ttyUSB0 -b 460800 --before default_reset --after no_reset --chip esp32s3 write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 build-ESP32_GENERIC_S3-FLASH_16M_SPIRAM_OCT/bootloader/bootloader.bin 0x8000 build-ESP32_GENERIC_S3-FLASH_16M_SPIRAM_OCT/partition_table/partition-table.bin 0x10000 build-ESP32_GENERIC_S3-FLASH_16M_SPIRAM_OCT/micropython.bin The esptool command for flashing the ESP32S3 module with the custom image can be rather long. Thankfully, after the previous make command succeeds in building the image, it prints out the full flash command for you.\nThe build process also generates a single binary firmware.bin that combines bootloader.bin, partition-table.bin and micropython.bin listed above. For a shorter flash command you can try:\n: $ esptool.py --chip esp32s3 --port /dev/ttyUSB0 erase_flash : $ esptool.py -p /dev/ttyUSB0 -b 460800 --before default_reset --after no_reset --chip esp32s3 write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 build-ESP32_GENERIC_S3-FLASH_16M_SPIRAM_OCT/firmware.bin or this for further brevity:\n: $ esptool.py --chip esp32s3 --port /dev/ttyUSB0 erase_flash : $ esptool.py --chip esp32s3 --port /dev/ttyUSB0 write_flash -z 0 build-ESP32_GENERIC_S3-FLASH_16M_SPIRAM_OCT/firmware.bin Because the esp-idf\u0026rsquo;s environment variables were loaded with the export.sh command, the terminal should have access to the esptool programmer via the esp-idf SDK without resorting to the use of the Python virtual environment created in the previous blog entry.\nAfter resetting the board and opening Thonny, we are greeted with the Micropython Shell shown below:\nThe Micropython shell prints out the board name that we placed in the mpconfigboard.cmake file for the 16MB with SPI octal ram variant: ESP32S3 microcontroller with 16MB of Flash \u0026amp; Octal-SPIRAM.\nNow let\u0026rsquo;s run the following Micropython script to determine how much Flash and RAM is detected:\nimport esp import gc print(\u0026#34;Available Flash: {}\u0026#34;.format(esp.flash_size())) print(\u0026#34;Available RAM: {}\u0026#34;.format(gc.mem_free())) The output is provided in the figure above. It seems that our custom Micropython build is now able to take advantage of all 16MB of available Flash memory! Success!\n","date":"2024-06-17T00:00:00Z","permalink":"http://localhost:1313/p/building-a-micropython-image-from-source-for-the-esp32-s3-with-16mb-of-flash/","title":"Building a Micropython image from source for the ESP32-S3 with 16MB of Flash"},{"content":"I recently purchase an ESP32-S3-DevKitC-1 v1.1 development board and wanted to program it Micropython.\nI got the ESP32-S3-DevKitC-1-N16R8V variant with the ESP32-S3-WROOM-2-N16R8V module. This particular module comes with 16MB of octal SPI Flash memory and 8MB of octal SPI PSRAM; plenty of program memory and RAM for all of those Micropython objects!. In this blog entry, I will list the steps necessary to get Micropython up and running on this board!\nTo get started, Download the latest precompiled Micropython image (Octal-SPIRAM support) from the official Micropython download page.\n:~$ wget https://micropython.org/resources/firmware/ESP32_GENERIC_S3-SPIRAM_OCT-20240602-v1.23.0.bin To flash the image onto the microcontroller board, you\u0026rsquo;ll need the esptool programmer software. There are many ways of installing esptool. Since esptool is a Python application, one way to install it is via Python\u0026rsquo;s package manager pip. But you\u0026rsquo;ll need to setup a virtual Python environment first. This can accomplished with the following instruction on Debian Bookworm:\n:~$ mkdir -p ~/Development/PythonVirtEnvironments/ :~$ python3 -m venv ~/Development/PythonVirtEnvironments/EsptoolEnv Now activate the Python virtual environment and install the esptool programmer.\n:~$ source ~/Development/PythonVirtEnvironments/EsptoolEnv/bin/activate (EsptoolEnv) :~$ pip install esptool To flash the Micropython bin file, connect the USB cable to the USB port on the left of the board (the one attached to the UART0 peripheral on the ESP32S3\u0026rsquo;s via the USB-Serial FTDI chip). Make sure that you are using the right port name. In my case that was /dev/ttyUSB0. Run the following commands to: i) erase the ESP32S3 module, \u0026amp; ii) program it with the downloaded binary:\n(EsptoolEnv) :~$ esptool.py --chip esp32s3 --port /dev/ttyUSB0 erase_flash (EsptoolEnv) :~$ esptool.py --chip esp32s3 --port /dev/ttyUSB0 write_flash -z 0 ESP32_GENERIC_S3-SPIRAM_OCT-20240602-v1.23.0.bin You should get the following output:\nNow install and run Thonny; an easy to use yet versatile Micropython IDE:\n(EsptoolEnv) :~$ pip install thonny (EsptoolEnv) :~$ thonny Goto Run-\u0026gt;Configure Interpreter and ensure that the Interpretertab in the Thonny options looks as shown below:\nclick \u0026lsquo;OK\u0026rsquo; on the dialog and you should be presented with the Micropython shell at the bottom of the thonny window as shown in the figure below.\nTo get started, let\u0026rsquo;s see how much PSRAM and Flash are detected in the Micropython shell. To find out how much PSRAM is detected, type the following:\nimport gc gc.mem_free() Notice that we get 8312160 bytes. This is close enough to the 8MB of PSRAM that we were expecting (8388608 bytes). The difference is very likely the memory used to launch the Micropython interpreter.\nWhat about Flash memory ?\nimport esp esp.flash_size() For Flash, it looks like Micropython is only able to detect 8 of the available 16 Megabytes. The Micropython ESP32_GENERIC_S3 images all seem to support a maximum of 8MB even if the on module Flash memory is more. What a bummer! I\u0026rsquo;ve seen ESP32-S3 boards with as much as 32MB of Flash being sold on Digikey. To be fair, if you purchase the ESP32-S3-DevKitC-1-N8R8V variant of the ESP32-S3 Devkit board (with 8MB of Flash and 8MB of PSRAM), this image will be all you need.\nWhile the prebuilt Micropython build is fully functional, and the 8MB of Flash memory that it detected on our board will be enough for most projects, the fact that only half the available Flash is detected triggers my OCD a little. In a future entry, I\u0026rsquo;ll demonstrate how to build a Micropython image from source that supports the 16MB of Flash in its entirety.\n","date":"2024-06-17T00:00:00Z","permalink":"http://localhost:1313/p/flashing-micropython-on-the-esp32-s3-microcontroller/","title":"Flashing Micropython on the ESP32-S3 Microcontroller"},{"content":"The topic of bit manipulation in C doesn\u0026rsquo;t seem to get as much attention in many C programming books and study guides. Perhaps because it\u0026rsquo;s a not used regularly by application developers and system programmers.\nKnowledge of bit manipulation is however downright critical in the fields of embedded systems, kernel space programming and device drivers programming, where the programmer directly accesses registers i.e. talking to hardware.\nProgrammer\u0026rsquo;s access registers directly via Read-Modify-Write (RMW) operations. RMW operations in turn rely heavily on bitwise operators and other parts of the C programming language that facilitate bit manipulation. In order to understand and correctly use RMW operations, a solid foundation in the basics of bit manipulation must me developed. This article will attempt to provide the reader with said foundation.\nBitwise operators Let us first start by introducing the bitwise operators:\nBitwise operator Description What it does \u0026amp; Bitwise AND operator \u0026lsquo;AND\u0026rsquo;s two values at the binary level | Bitwise OR operator \u0026lsquo;OR\u0026rsquo;s two values at the binary level ^ Bitwise XOR operator \u0026lsquo;XOR\u0026rsquo;s two values at the binary level ~ Bitwise One\u0026rsquo;s complement operator Flips every bit in the register \u0026gt;\u0026gt; Bitwise right shift operator Shifts a value to the right at the bit level by a specified number of bits \u0026lt;\u0026lt; Bitwise left shift operator Shifts a value to the left at the bit level by a specified number of bits Consider the code snippet below. It declares three unsigned 8 bit integer variables; a,b \u0026amp; y. And initializes a to 200, b to 56 and y to 0.\nuint8_t a = 200; uint8_t b = 56; uint8_t y = 0; The One\u0026rsquo;s complement (NOT) unary operator simply flips all of the bits at a binary level as shown in Figure 1.\ny = ~a; If a bitwise AND is performed between a and b, the result is 8. Note how the bitwise AND operation performs a Boolean logical ANDing at the bit level.\ny = a \u0026amp; b; A bitwise OR performed between a and b, results in 248.\ny = a | b; A bitwise XOR performed between a and b, results in 240.\ny = a ^ b; A bitwise right shift (by three bits) performed on a, results in 25.\ny = a \u0026gt;\u0026gt; 3; And finally, a bitwise left shift (by 3 bits) performed on a, results in 64.\ny = a \u0026lt;\u0026lt; 3; The only reason this result is only 64, is because the three most significant bits are outside the bounds of the unsigned 8-bit integer variable and are therefore truncated i.e. they don\u0026rsquo;t count. If a and y where both say 16 bit unsigned integers, the result of this operation becomes 1600.\nNote that shifting a value to the left by x bits, is equivalent to multiplying that value by \\(2^x\\). This is exactly what happened here i.e. \\(200 \u003c\u003c 3\\) is equivalent to 200 * \\(2^3\\) . More on this in the next paragraph.\nAt this point it is important to note that bit shifts can facilitate multiplication and division operations by\u0026rsquo;power of two\u0026rsquo; literals. For example, if our goal is to multiply a variable x by 8 ( \\(2^3\\) ), it can be achieved through good old fashioned multiplication; or by bit shifting the variable x by 3 times to the left.\ny = x * 8; is equivalent to y = x \u0026lt;\u0026lt; 3;\nSimilarly, dividing (integer division) a variable x by 8 \\(2^3\\), can be achieved by bit shifting the variable x by 3 times to the right.\ny = x / 8; is equivalent to y = x \u0026gt;\u0026gt; 3;\nYou can verify all the operations mentioned so far by compiling and running this simple C program with GCC or your favourite C compiler:\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdint.h\u0026gt; int main (void) { uint8_t a,b,c,y; uint16_t a16, y16; a = 200; b = 56; c = 16; y = 0; a16 = 200; y16 = 0; y = ~200; printf(\u0026#34; The one\u0026#39;s complement (NOT) of 200 is %i \\n\u0026#34;,(unsigned int)y); y = a \u0026amp; b; printf(\u0026#34; Bitwise ANDING of 200 and 56 gives %i \\n\u0026#34;,(unsigned int)y); y = a | b; printf(\u0026#34; Bitwise ORING of 200 and 56 gives %i \\n\u0026#34;,(unsigned int)y); y = a ^ b; printf(\u0026#34; Bitwise XORING of 200 and 56 gives %i \\n\u0026#34;,(unsigned int)y); y = a \u0026lt;\u0026lt; 3; printf(\u0026#34; Bitwise left shift by 3 of the value 200 (8-bit) gives %i \\n\u0026#34;,(unsigned int)y); y16 = a16 \u0026lt;\u0026lt; 3; printf(\u0026#34; Bitwise left shift by 3 of the value 200 (16-bit) gives %i \\n\u0026#34;,(unsigned int)y16); y = a \u0026gt;\u0026gt; 3; printf(\u0026#34; Bitwise right shift by 3 of the value 200 gives %i \\n\u0026#34;,(unsigned int)y); printf(\u0026#34; Multiplying the value 16 by 8 (2^3) gives %i. Bit shifting the value 16 by 3 bits to the left also gives %i \\n\u0026#34;,(unsigned int)c*8, (unsigned int) c\u0026lt;\u0026lt;3); printf(\u0026#34; Dividing the value 16 by 8 (2^3) gives %i. Bit shifting the value 16 by 3 bits to the right also gives %i \\n\u0026#34;,(unsigned int)c/8, (unsigned int) c\u0026gt;\u0026gt;3); return 0; } when compiling and running the above program, it outputs:\nThe one\u0026#39;s complement (NOT) of 200 is 55 Bitwise ANDING of 200 and 56 gives 8 Bitwise ORING of 200 and 56 gives 248 Bitwise XORING of 200 and 56 gives 240 Bitwise left shift by 3 of the value 200 (8-bit) gives 64 Bitwise left shift by 3 of the value 200 (16-bit) gives 1600 Bitwise right shift by 3 of the value 200 gives 25 Multiplying the value 16 by 8 (2^3) gives 128. Bit shifting the value 16 by 3 bits to the left also gives 128 Dividing the value 16 by 8 (2^3) gives 2. Bit shifting the value 16 by 3 bits to the right also gives 2 Compound assignment operators The compound assignment operators consist of a binary operator (operator that operates on two variables) and the simple assignment operator. They perform the operation of the binary operator on both operands and store the result of that operation into the left operand i.e. x += y adds the values of variables x and y and stores the result back into x. This operation is a shorthand version of x = x + y\nAll arithmetic compound assignment operators and their expanded equivalent operations are listed below:\nCompound assignment Equivalent expanded assignment x \u0026lt;op\u0026gt;= y x = x \u0026lt;op\u0026gt; y x += y x = x + y x -= y x = x \u0026ndash; y x *= y x = x * y x /= y x = x / y Compound assignment operator notation also works for all 2-variable (binary) bitwise operators:\nCompound assignment Expanded equivalent x \u0026amp;= y x = x \u0026amp; y x |= y x = x | y x ^= y x = x ^ y x \u0026lt;\u0026lt;= y x = x \u0026lt;\u0026lt; y x \u0026gt;\u0026gt;= y x = x \u0026gt;\u0026gt; y There\u0026rsquo;s no compound assignment operator for the bitwise one\u0026rsquo;s complement operator ~ since it a unary operator.\nNon-Decimal Numerical Representation in C In C an integer number can be represented in decimal, binary, hexadecimal and octal formats through the use of prefixes:\nTo represent a number in decimal no prefix is needed, i.e. x = 255 To represent a binary, precede it with a 0b, i.e. x = 0b11111111 To represent a number in hexadecimal, precede it with a 0x, i.e. x = 0xff To represent a number in octal, precede it with 0, i.e. x = 0377 While the numerical representation utilized matters little to the compiler (all numbers end up being processed in binary), in some instances using different numerical representations when writing a program can improve the readability of the program.\nAnother way to represent a number is to left shift a 1 by an arbitrary number of bits. consider the number 8. In binary, number 8 is represented as 0b00001000. That\u0026rsquo;s basically a \u0026lsquo;1\u0026rsquo; in the third position (start counting from right to left). Therefore number 8 can also be represented with a left shift operation as 1 \u0026lt;\u0026lt; 3.\nIn a similar manner we have:\nDecimal Binary equivalent Bit mask equivalent 1 0b00000001 1 \u0026lt;\u0026lt; 0 2 0b00000010 1 \u0026lt;\u0026lt; 1 4 0b00000100 1 \u0026lt;\u0026lt; 2 8 0b00001000 1 \u0026lt;\u0026lt; 3 16 0b00010000 1 \u0026lt;\u0026lt; 4 32 0b00100000 1 \u0026lt;\u0026lt; 5 64 0b01000000 1 \u0026lt;\u0026lt; 6 128 0b10000000 1 \u0026lt;\u0026lt; 7 Using this mask representation works nicely for numbers that are powers of two. Since these numbers consist of a single \u0026lsquo;1\u0026rsquo; value (set bit) in a particular bit position. What if we have a number that was not a power of two, say something like 14 or 25?\nNumber 14 is equivalent to 8+4+2, or in binary 0b00001110. This can be written as: (1 \u0026lt;\u0026lt; 3) | (1 \u0026lt;\u0026lt; 2) | (1 \u0026lt;\u0026lt; 1) Number 25 is equivalent to 16+8+1 or in binary 0b00011001. This can be written as (1 \u0026lt;\u0026lt; 4) | (1 \u0026lt;\u0026lt; 3) | (1 \u0026lt;\u0026lt; 0) Using this approach, any positive integer can be represented using this mask representation by either a single left shift of 1 , or by bitwise ORing multiple left shifts of \u0026lsquo;1\u0026rsquo; !\nThe reader is now ready to tackle RMW operations! They will be covered in the next article in this series.\n","date":"2024-06-02T00:00:00Z","permalink":"http://localhost:1313/p/bit-manipulation-in-c-part-i-bit-manipulation-basics/","title":"Bit Manipulation in C Part I - Bit Manipulation Basics"},{"content":"This article covers Read Modify Write (RMW) operations. These operations allow the programmer to manipulate one or more bits of interest within a variable (or register), without affecting the state of the rest of the bits in the that variable (or register). In order to understand RMW operations, the reader must have a solid foundation in bit manipulation. Bit manipulation basics were covered in the Bit Manipulation in C Part 1 - Bit Manipulation basics blog entry.\nThere are four main RMW operations:\nSetting one or more bits in a register. Clearing one or more bits in a register. Toggling one or more bits in a register. Reading the value of a particular bit within a register. For the rest of this blog entry variables and / or registers will be referred to as registers for brevity. Both refer to locations in memory where data is stored. The term register is typically used when referencing memory locations capable of directly affecting hardware operation of either the CPU or a hardware peripheral.\nThe reason why these type of operations are often referred to as Read-Modify-Write is because they involve:\nReading the state of the register, Modifying the state of that register by performing a bitwise logical operation on the value read from the register, with a bit mask of some kind intending to modify one or more (particular) bits within the register , and finally, Write-ing back the result into the same register. Only the bits of interest are modified by an RMW operation. the state of the bits that are not of interest within the register never changes.\nSetting one or more bits in a register The first RMW operation that will be examined is the set operation. The goal here is to set one or more bit(s) of interest in a register, without disturbing the state of the other bits that are not of interest. To achieve this, OR the current content of the register with a mask value with only one(s) in the bit location(s) to be set and zeroes elsewhere.\nTo further elaborate, if the value of a register (or variable) a is 200. To set bit x in that register, OR a with a mask value of 2^x^.\nConsider the following example (See Figure 1.). If the goal is to set bit 5 in register a, the mask is 2^5^ = 32. The set operation then becomes:\na= a | 32; which is equivalent the following compound assignment statement:\na |= 32; Alternatively 32 can be written as (1 \u0026lt;\u0026lt; 5) in C. This mask notation is easier to read and immediately indicates to the reader/programmer which bit is being set. The final operation becomes:\na |= (1 \u0026lt;\u0026lt; 5); In summary to set a bit x in register reg, use the following expression:\nreg |= (1 \u0026lt;\u0026lt; x); What if the programmer needs to set more than one bit in register reg, say bit positions x, y and z?\nreg |= ((1 \u0026lt;\u0026lt; x) | (1 \u0026lt;\u0026lt; y) | (1 \u0026lt;\u0026lt; z)); Clearing one or more bits in a register The goal here is to clear one or more particular bit(s) in a register, without disturbing the state of the other bits that are not of interest. To achieve this, AND the current content of the register with a mask value with zero(es) in the bit location(s) that we want to clear and ones elsewhere.\nIf the value of the register a is 200. To clear bit x in that register, the content of register a is ANDed with a mask that is the inverted (one\u0026rsquo;s complement) value of 2^x^.\nFor example, if the goal is to clear bit 6. the mask becomes the one\u0026rsquo;s complement of 2^6^ = 64 which results in 191. Therefore to clear bit 6 in register a:\na= a \u0026amp; 191; which is equivalent to the following compound assignment statement\na \u0026amp;= 191; Alternatively 191 can be written as ~(1 \u0026lt;\u0026lt; 6) in C. This mask notation is much more readable as it indicates to the reader/programmer which bit is being cleared without having to resort to doing decimal to binary conversion.\na \u0026amp;= ~(1 \u0026lt;\u0026lt; 6); In summary, to clear a bit x in register reg use the following expression:\nreg \u0026amp;= ~(1 \u0026lt;\u0026lt; x); What if the programmer needs to clear more than one bit in register reg, say bits x, y and z ?\nreg \u0026amp;= ~((1 \u0026lt;\u0026lt; x) | (1 \u0026lt;\u0026lt; y) | (1 \u0026lt;\u0026lt; z)); Toggling one or more bits in a register The goal here is to toggle one or more particular bit(s) in a register, without disturbing the state of the other bits that are not of interest. To achieve this, XOR the current content of the register with a mask value with one(s) in the bit locations to be toggled and zeroes elsewhere.\nFor example if the value of a register a is 200, to toggle bit \u0026lsquo;x\u0026rsquo; in that register, one will need to XOR a with a mask value of 2^x^.\nTo further elaborate, If the goal is to toggle bit 5 in register a, the mask is 2^5^ = 32. The set operation then becomes:\na= a ^ 32 ; which is equivalent to\na ^= 32; in shorthand notation. Alternatively 32 can be written as (1 \u0026lt;\u0026lt; 5) in C.\na ^= (1 \u0026lt;\u0026lt; 5); In summary, to toggle a bit x in register reg use the following expression:\nreg ^= (1 \u0026lt;\u0026lt; x); What if the programmer needs to toggle more than one bit in register reg, say bits x,y and z ?\nreg ^= ((1 \u0026lt;\u0026lt; x) | (1 \u0026lt;\u0026lt; y) | (1 \u0026lt;\u0026lt; z)); Read the value of bit in a registers To read the value of a bit x in a register a, simply AND register a with a mask value of 2^x^ (i.e. all bit positions are 0\u0026rsquo;s except position x).\nIf the result is 0 then bit x in register a was 0(cleared). If the result is non-zero, then bit x in register a was 1(set).\nFor example to read the state of bit 5 in register a:\nuint8_t a , y; y = a \u0026amp; 32; if(y == 0 ) printf(\u0026#34;Bit 5 in register a is zero\u0026#34;); else printf(\u0026#34;Bit 5 in register a is one\u0026#34;); In C, a non-zero value evaluates to true so the statement\nif(y)Copy will evaluate to true if \u0026lsquo;y\u0026rsquo; is non-zero. Using this knowledge and compund assignment notation, the previous code snippet becomes:\nif(a \u0026amp; (1 \u0026lt;\u0026lt; 5)) printf(\u0026#34;Bit 5 in register a is one\u0026#34;); else printf(\u0026#34;Bit 5 in register a is zero\u0026#34;); In some cases the programmer will want to return the exact state of the bit in a register and not a non-zero value when the state of the bit is one, and zero when the state of the bit is zero. This can be accomplished with the ternary operator. If bit x in register a is 1, res will be 1. else res will be zero.\nres = (a \u0026amp; ( 1\u0026lt;\u0026lt; x )) ? 1 : 0 ; Another method of reading the state of a bit x in register a is to use this statement:\nres = (a \u0026gt;\u0026gt; x) \u0026amp; 1; This shifts the content of register a to the right by x bits, putting the \u0026lsquo;xth\u0026rsquo; bit to be tested in the zeroth position. It is then ANDed with one. If this bit is zero, the result of the operation is zero, else it is one.\nIn summary to read the state of bit x in register a with an if statement:\nif(a \u0026amp; (1 \u0026lt;\u0026lt; x)) printf(\u0026#34;Bit x in register a is one\u0026#34;); else printf(\u0026#34;Bit x in register a is zero\u0026#34;); If the state of the bit is to be returned without an if statement, use either\nres = (a \u0026amp; ( 1\u0026lt;\u0026lt; x ) ) ? 1 : 0 ; or\nres = (a \u0026gt;\u0026gt; x) \u0026amp; 1; Building a bit manipulation library Now with the knowledge of how RMW operations function, a quick library that performs these operations can be built!\nThe macro version should look like this:\n#define m_setBit(reg,x) reg |= (1 \u0026lt;\u0026lt; x) #define m_clearBit(reg,x) reg \u0026amp;= ~(1 \u0026lt;\u0026lt; x) #define m_toggleBit(reg,x) reg ^= (1 \u0026lt;\u0026lt; x) #define m_readBit(reg,x) (reg \u0026gt;\u0026gt; x) \u0026amp; 1 #define m_readBit2(reg,x) (reg \u0026amp; ( 1\u0026lt;\u0026lt; x ) ) ? 1 : 0 If you are not a big fan of macros, the inline function version of the library would look something like this:\nvoid setBit(int* reg, int x){ *reg |= (1 \u0026lt;\u0026lt; x);} void clearBit(int* reg, int x){ *reg \u0026amp;= ~(1 \u0026lt;\u0026lt; x);} void toggleBit(int* reg, int x){ *reg ^= (1 \u0026lt;\u0026lt; x);} int readBit( int* reg, int x){ return (*reg \u0026gt;\u0026gt; x) \u0026amp; 1;} int readBit2( int* reg, int x){ return (*reg \u0026amp; ( 1\u0026lt;\u0026lt; x ) ) ? 1 : 0 ;} Note that these macros/functions only modify one bit at a time.\nOne last thing. The RMW operations introduced in this article are not strictly atomic i.e. they will very likely not happen in a single instruction cycle and may even take several instruction cycles to execute. They merely give us bit granularity i.e. ensure that only the bits of interest within a register are changed while keeping the state of bits that are not of interest undisturbed.\n","date":"2024-06-02T00:00:00Z","permalink":"http://localhost:1313/p/bit-manipulation-in-c-part-ii-read-modify-write-operations/","title":"Bit Manipulation in C Part II - Read Modify Write Operations"}]